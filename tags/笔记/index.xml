<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>笔记 - 标签 - zyz的技术博客</title>
    <link>http://localhost:1313/tags/%E7%AC%94%E8%AE%B0/</link>
    <description>笔记 - 标签 | zyz的技术博客</description>
    <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>youzhizheng9@gmail.com (zyz)</managingEditor>
      <webMaster>youzhizheng9@gmail.com (zyz)</webMaster><lastBuildDate>Tue, 24 Jun 2025 09:53:34 &#43;0800</lastBuildDate><atom:link href="http://localhost:1313/tags/%E7%AC%94%E8%AE%B0/" rel="self" type="application/rss+xml" /><item>
  <title>Cmake学习笔记</title>
  <link>http://localhost:1313/posts/6c7e777/</link>
  <pubDate>Tue, 24 Jun 2025 09:53:34 &#43;0800</pubDate>
  <author>zyz</author>
  <guid>http://localhost:1313/posts/6c7e777/</guid>
  <description><![CDATA[该笔记只是用于记录和梳理CMake中比较重要的知识，并不会写得很详细（比如不会写出使用project()命令后会创建哪些变量）。学完本笔记即可上手使用CMake，一些很细的知识可以在遇到所用的场景时自行查阅官方资料。
基础框架最基本的CMake项目是由单个源代码文件构建可执行文件，对于这种简单的项目，只需要给 CMakeLists.txt 文件提供三个命令：
1 2 3 4 5 6 7 8 9 cmake_minimum_required(VERSION x.xx) # 指定CMake最低版本 project( ProjectName # 项目名称 VERSION x.x.x # 项目版本 LANGUAGES CXX # 项目语言, CXX表示C++ ) add_executable(ExecutableName SourceCodePath) # 设置可执行文件的名称和源代码路径 例如：
1 2 3 4 5 6 7 8 9 cmake_minimum_required(VERSION 3.15) project( MBFF VERSION 0.1.12 LANGUAGES CXX ) add_executable(MBFF src/main.cpp) 这样我们就可以产生一个名为MBFF的可执行文件。
其中 cmake_minimum_required()和project()命令需要在项目的顶级CMakeLists.txt给出（当项目十分复杂时，会存在多个CMakeLists.txt文件）。
cmake_minimum_required(): 该命令是CMakeLists.txt中第一条执行的命令，用于控制CMake的版本，禁用一些已启用的特性 project(): 设置项目的相关属性，可以只设置项目名称，但推荐按上面的写法来用 add_executable(): 产生可执行文件，没有该命令是不会产生可执行文件的 注意：CMakeLists.txt的命令执行顺序是从上往下的，所以要有逻辑的编写命令。
使用上面的命令足够处理一些基本情况了，但是当我们在代码中使用了一些C++17或更高标准的特性后，会发现编译失败，这是因为编译器会使用默认标准（通常为 C++98/GCC 或 C++14/Clang， 可通过输出变量 CMAKE_CXX_STANDARD_DEFAULT 的值查询默认值）来进行编译，导致不存在这些特性。这时，就需要使用 set() 命令来进行相关设置：]]></description>
</item>
<item>
  <title>西瓜书学习笔记</title>
  <link>http://localhost:1313/posts/80bdcb8/</link>
  <pubDate>Mon, 25 Nov 2024 11:14:23 &#43;0800</pubDate>
  <author>zyz</author>
  <guid>http://localhost:1313/posts/80bdcb8/</guid>
  <description><![CDATA[第2章 模型评估与选择经验误差与过拟合错误率： 分类错误的样本占样本总数的比例。设m个样本中有a个样本分类错误，则错误率 $E = a / m$。
精度： 分类正确的样本占样本总数的比例。即 &ldquo;精度 = 1 - 错误率&rdquo;（精度一般用百分比表示）。
一般来说，将学习器的实际预测输出与样本的真实输出之间的差异称为 &ldquo;误差&rdquo;。
训练误差： 学习器在训练集上的误差（也叫经验误差）。
泛化误差： 学习器在新样本上的误差。
我们希望得到的学习器是能在新样本上有很好表现的学习器。为了能达到这个目的，应该从训练样本中尽可能学出适用于所有潜在样本的普遍规律，这样才能在遇到新样本时做出正确判断。然而，当学习器把训练样本学得太好时就会出现「过拟合」现象。与过拟合相对的是「欠拟合」。
过拟合： 学习器把训练样本自身的一些特点当作了所有潜在样本的特点，导致泛化性能下降。
欠拟合： 学习器对训练样本的一般性质尚未学好，没有很好地学习到训练样本中的模式和规律。
导致过拟合的因素有很多，其中最常见的情况是学习能力过于强大（学习能力由学习算法和数据内涵共同决定），以至于学习器把训练样本所包含的不太一般的特性都学到了。而欠拟合则通常是由于学习能力低下而造成的。过拟合是机器学习面临的关键障碍，是无法避免的，我们所能做的只是 &ldquo;缓解&rdquo; 过拟合。
在现实任务中，我们有许多学习算法可以选择，各类算法都必然带有一些针对过拟合的措施，甚至同于同一个算法来说，使用不同的参数配置时，也会产生不同的模型。那么该选择哪一个学习算法、使用哪一种参数配置呢？这就是机器学习中的「模型选择」问题。理想的解决方案为对候选模型的泛化误差进行评估，然后选择泛化误差最小的模型。然而，我们是无法直接获取泛化误差的，而训练误差又由于过拟合现象的存在不适合作为标准，那么在现实中如何进行模型的评估与选择呢？
评估方法我们通常会将数据集D划分为训练集S和测试集T，使用T来测试学习器对新样本的判别能力，然后以T上的测试误差作为泛化误差的近似。需要注意的是，T与S应该尽可能的 「互斥」。
1. 留出法该方法直接将数据集D划分为两个互斥的集合，其中一个作为训练集S，另一个作为测试集T，即$D=S \cup T, S \cap T=\varnothing$。使用测试误差来近似泛化误差。
需要注意的是，S 和 T 的划分要尽可能保持数据分布的一致性（即在不同数据集或数据样本中，数据的分布特性保持相同或相似的性质），避免因数据划分过程引入额外的偏差而对最终结果产生影响。
单次使用留出法得到的结果往往都是不够稳定和可靠的，因此，在使用留出法时，一般采用多若干次随机划分、重复进行实验评估后取平均值作为留出法的评估结果。此外，我们希望评估的是用数据集D训练出来的模型的性能，但留出法需将D划分为S和T，这就会导致一个问题：若训练集包含绝大多数样本，则训练出的模型会更接近用D训练出的模型，但由于T比较小，评估结果可能不够稳定准确；若T多包含一些样本，则S与D的差别就会变大，导致被评估的模型与用D训练出的模型相比可能有较大差异，从而降低了评估结果的保真性。这个问题没有完美的解决方案，常见做法是将大约 2 / 3 ~ 4 / 5 的样本作为训练，剩下的作为测试。
2. 交叉验证法该方法将数据集D划分为 k 个大小相似的互斥子集，即$D=D_{1} \cup D_{2} \cup \ldots \cup D_{k}, D_{i} \cap D_{j}=\varnothing(i \neq j) \text {.]]></description>
</item>
<item>
  <title>Numpy学习笔记</title>
  <link>http://localhost:1313/posts/acd830e/</link>
  <pubDate>Sun, 24 Nov 2024 15:39:48 &#43;0800</pubDate>
  <author>zyz</author>
  <guid>http://localhost:1313/posts/acd830e/</guid>
  <description><![CDATA[Numpy学习笔记]]></description>
</item>
<item>
  <title>Python学习笔记</title>
  <link>http://localhost:1313/posts/92c957a/</link>
  <pubDate>Wed, 20 Nov 2024 21:35:53 &#43;0800</pubDate>
  <author>zyz</author>
  <guid>http://localhost:1313/posts/92c957a/</guid>
  <description><![CDATA[环境搭建我是在WSL2下的Ubuntu进行Python开发的，所以本笔记的环境搭建仅适用于Liunx开发环境，Windows下搭建环境请自行Google。
miniconda首先，先安装 miniconda，直接按照官方教程即可安装。
不同的项目可能需要不同版本的库或包，而直接在系统中安装多个版本可能会导致冲突和不可预见的问题。为了解决这个问题，conda虚拟环境应运而生。
conda虚拟环境允许你在同一台机器上创建多个 「独立」 的环境，每个环境都有自己的Python解释器和依赖库，从而实现了项目之间的隔离。这样，你可以在一个环境中安装特定版本的库，而不影响其他环境。
miniconda 的常用命令有：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 # 创建一个名为 myenv 的环境并指定在该环境中安装 3.7版本的Python conda create --name myenv python=3.7 # 激活或切换到名称为 myenc 的环境 conda activate myenv # 在当前环境下安装 numpy 包 conda install numpy # 在当前环境下安装指定版本的 numpy 包 conda install numpy=1.]]></description>
</item>
<item>
  <title>Linux学习笔记</title>
  <link>http://localhost:1313/posts/3d623e4/</link>
  <pubDate>Thu, 15 Aug 2024 10:57:39 &#43;0800</pubDate>
  <author>zyz</author>
  <guid>http://localhost:1313/posts/3d623e4/</guid>
  <description><![CDATA[软件安装与更新在Linux下，一般用包管理器来安装软件，它能自动化地完成软件的安装、更新、配置和移除功能，优雅而快速。
软件包管理器的一个重要组成部分是软件仓库。软件仓库是收藏了互联网上可用软件包（应用程序）的图书馆，里面往往包含了数万个可供下载 和安装的可用软件包。
有了软件仓库，我们不需要手动下载大量的软件包再通过包管理器安装。只需要知道软件在软件仓库中的名称，即可让包管理器从网络中抓取到相应的软件包到本地，自动进行安装。
但是与应用商店相比，使用包管理器安装需要预先知道所需软件在软件仓库中的对应包名，和应用商店相比无法进行模糊搜索（不过你也可以在包管理器官网上进行查找包名，再通过包管理器安装）。
作者使用的是Ubuntu系统，Ubuntu下默认的包管理器为apt，所有后面的讲解以apt为例。
使用包管理器系统安装搜索安装前，先在浏览器中搜索所需的软件，查找包名，再使用 apt search package_name 命令搜索软件仓库，查看对应的包名是否在软件仓库中(这步可跳过，只要知道要安装的软件包名即可)。
安装找到要安装的软件的包名后，使用命令 apt install package_name 进行安装。
PS： 如果提示当前用户无安装软件权限，则在命令前加上 sudo，即 sudo apt install package_name，输入此命令后会要求用户输入密码(输入的密码不会在终端显示)。
官方软件源镜像通过 apt 安装的软件都来源于相对应的软件源，每个 Linux 发行版一般都带有官方的软件源，在官方的软件源中已经包含了丰富的软件，apt 的软件源列表在 /etc/apt/sources.list 下。
Ubuntu 官方源位于国外，往往会有速度与延迟上的限制，可以通过修改官方源为其镜像实现更快的下载速度。镜像缓存了官方源中的软件列表，与官方源基本一致。
修改官方源为镜像步骤
本例以修改官方源为 USTC Mirror 为例。注意：在操作前请做好备份。
一般情况下，/etc/apt/sources.list 下的官方源地址为 http://archive.ubuntu.com/ ，我们只需要将其替换为 http://mirrors.ustc.edu.cn 即可。
如果你使用 Ubuntu 图形安装器安装，默认的源地址通常不是 http://archive.ubuntu.com/ ， 而是 http://&lt;country-code&gt;.archive.ubuntu.com/ubuntu/ ，如 http://cn.archive.ubuntu.com/ubuntu/，同样也将其替换为 http://mirrors.ustc.edu.cn 即可。
可以使用如下命令：
$ sudo sed -i 's|//.*archive.ubuntu.com|//mirrors.ustc.edu.cn|g' /etc/apt/sources.list
当然也可以直接使用 vim、nano 等文本编辑器进行修改。]]></description>
</item>
<item>
  <title>C&#43;&#43;学习笔记</title>
  <link>http://localhost:1313/posts/3b2b064/</link>
  <pubDate>Wed, 07 Aug 2024 20:15:22 &#43;0800</pubDate>
  <author>zyz</author>
  <guid>http://localhost:1313/posts/3b2b064/</guid>
  <description><![CDATA[前言由于笔者具备一定的C语言基础，所以在本文中对于C语言的语法不再会进行赘述，主要专注与C++语法。为了更好的学习C++，笔者找了一些题目来进行练习，所有题目与题解均可在此仓库找到。
本学习笔记适用于 「具备一定C语言基础，想要使用C++来编写代码」 的读者。
本文阅读指南：
在看过示例代码后，一定要编写一个自己的示例代码 或 自己动手重写一遍。 标红的注意内容一定要仔细看！！！ 一定要做上面仓库中的题！！！一定要做上面仓库中的题！！！一定要做上面仓库中的题！！！ 好的命名能够提高代码的可读性，本文从类章节开始采用以下命名规范：
局部变量名单词之间使用下划线隔开； 类的变量成员用下划线作为前缀如 _file_name; 类的函数名使用驼峰类型；如doSomething(); 类的成员存取使用 如get_file_name() set_file_name()； 类名是PASCAL风格，即首字母大写 如MyClass； 常量用k作为前缀后面是PASCAL风格如 kFileName; 全局变量用g作为前缀后面是PASCAL风格如 gFileName; 宏定义全大写，中间用下划线隔开 FILE_NAME。 从C到C++本章节主要介绍一些C++的比较重要特性，例如如何申请和释放内存空间、bool和string类型、命名空间等。这些新特性可以给我们编程提供遍历，提高开发效率。
布尔类型(bool)在C语言中，没有&quot;真&quot;与&quot;假&quot;的数据类型，我们通常使用一个整形变量的值来表示真假，其值为 1 表示真，为 0 表示假。以下为一个例子：
1 2 3 4 5 6 7 8 int IsOddNum(int n) //判断一个数是否是奇数 { int flag; if(n % 2 == 0) flag = 0; else flag = 1; return flag; } 然而，这种做法有几个缺点：
可读性差： 使用整数来表示布尔值可能会让代码的可读性降低，因为读者需要记住0和非0值的含义。 存在类型安全问题： 整数可以进行算术运算，这可能导致意外的类型转换和错误。 语义不明确： 整数类型的使用没有明确表达出变量的布尔语义。 所以，C++提供了 bool 类型来表示真假，该类型的变量只有 true 和 false 两种取值。那么上面的例子则可改为：]]></description>
</item>
<item>
  <title>Git学习笔记</title>
  <link>http://localhost:1313/posts/a538cc4/</link>
  <pubDate>Sun, 21 Jul 2024 14:26:16 &#43;0800</pubDate>
  <author>zyz</author>
  <guid>http://localhost:1313/posts/a538cc4/</guid>
  <description><![CDATA[Git概述Git 是一款分布式的代码版本控制工具，Linux 之父 Linus 嫌弃当时主流的中心式的版本控制工具太难用还要花钱，就自己花两周时间开发出了 Git 的主体程序，一个月后就开始用Git来维护 Linux 的版本（给大佬跪了）。
常见的版本控制工具有：分布式版本控制工具和集中式版本控制工具
分布式版本控制工具：
工作原理： 分布式版本控制工具不依赖于单一的中央服务器，每个开发者都拥有完整的代码库的副本。开发者在本地工作副本上进行修改，并在本地进行提交、分支、合并等操作。开发者可以选择与其他开发者直接交换修改的内容，也可以将修改推送到共享的远程仓库中。 特点： 每个开发者都拥有完整的代码库的副本，可以在本地进行版本控制 具有更好的分支和合并功能，能够轻松地处理复杂的开发工作流程 典型的分布式版本控制工具有Git和Mercurial等 集中式版本控制工具：
工作原理： 集中式版本管理工具使用单一的中央服务器来存储所有版本的代码库。开发者在本地工作副本上进行修改，然后将修改后的内容提交到中央服务器。其他开发者通过从中央服务器检出代码库来获取最新的代码，并将他们的修改提交到同一个中央服务器上。 特点： 中央服务器是唯一的源头，所有的代码修改都需要提交到中央服务器 开发者在没有网络连接的情况下无法进行版本控制操作 典型的集中式版本管理工具包括Subversion（SVN）和Perforce等 Git的工作机制如下图所示:
工作区：开发人员在本地存放项目文件（代码）的地方 暂存区：是一个缓冲区域，用于临时存放即将提交到本地库的修改，开发者通过 git add 命令将工作区中的修改添加到暂存区，只有添加到暂存区的文件该会被提交到本地库中去 本地库：存放项目完整历史记录和版本信息的地方，开发者通过 git commit 命令将暂存区的内容提交到本地库，使用该命令后暂存区就会清空 远程库：用于存放项目的中央代码库（如GitHub），位于云端或其他服务器上。团队成员可以通过 git clone 操作从远程仓库克隆一个完整的 Git 仓库到本地。克隆操作会复制远程仓库的所有历史记录、分支、标签等信息，并在本地创建一个相同的仓库副本。通过 git push 用于将本地库推送到远程库， 通过 git pull 从远程库拉取最新的代码到本地库 Git安装Windows下安装先确定自己的电脑是64位操作系统还是32位的(按Win键，设置→系统→关于)，然后去Git官网下载对应的安装包，根据提示进行安装(详细安装过程请自行Google)。
注意： 安装路径中不要包含中文！
Ubuntu下安装由于本人是Ubuntu下使用Git的，所以这里的步骤会写的详细点。
输入命令 sudo apt-get install git进行安装，输入 git version 检查是否安装成功 输入命令 ssh -T git@github.com 检查是否可以连接到GitHub，如果看到
则说明能够连接。 安装SSH keys（一定要在 ~/.]]></description>
</item>
</channel>
</rss>
